
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum Token <'a> {
    Integer(&'a str),
    Float(&'a str),
    Identifier(&'a str),
    
    KwMACHINE,
    KwIMPLEMENTATION,
    KwCONSTRAINTS,
    KwCONCRETEVARIABLES,
    KwINVARIANT,
    KwINITIALISATION,
    KwOPERATIONS,
    KwEND,
    KwPRE,
    KwTHEN,
    KwVAR,
    KwIN,
    KwWHILE,
    KwDO,
    KwVARIANT,
    
    OpLpar,        // "(",
    OpRpar,        // ")",
    OpLbrace,      // "{",
    OpRbrace,      // "}",
    OpLbracket,    // "[",
    OpRbracket,    // "]",
    OpComma,       // ",",
    OpColon,       // ":",
    OpAmpersand ,  // "&",
    OpEqual,       // "=",
    OpSemicolon,   // ";",
    OpBullet,      // "◦",
    OpCross,       // "×",
    OpPercent,     // "%",
    OpVbar,        // "|",
    OpMinus,       // "-",
    OpPlus,        // "+",
    OpMdot,        // "·",
    OpSlash,       // "/",
    OpDomrestr,    // "<|",
    OpInter,       // "..",
    OpAssign,      // ":=",
    OpSimpleunion, // "\\/",
    OpSimpleinter, // "/\\",
    OpTotalfun,    // "-->",
    OpOutparam,    // "<--",
}


pub const KEYWORDS : [(&'static str,Token<'static>); 15] = [
    ("MACHINE",            Token::KwMACHINE),
    ("IMPLEMENTATION",     Token::KwIMPLEMENTATION),
    ("CONSTRAINTS",        Token::KwCONSTRAINTS),
    ("CONCRETE_VARIABLES", Token::KwCONCRETEVARIABLES),
    ("INVARIANT",          Token::KwINVARIANT),
    ("INITIALISATION",     Token::KwINITIALISATION),
    ("OPERATIONS",         Token::KwOPERATIONS),
    ("END",                Token::KwEND),
    ("PRE",                Token::KwPRE),
    ("THEN",               Token::KwTHEN),
    ("VAR",                Token::KwVAR),
    ("IN",                 Token::KwIN),
    ("WHILE",              Token::KwWHILE),
    ("DO",                 Token::KwDO),
    ("VARIANT",            Token::KwVARIANT),
];

pub const OPERATORS : [(&'static str,Token<'static>); 26] = [
    ("(",   Token::OpLpar),
    (")",   Token::OpRpar),
    ("{",   Token::OpLbrace),
    ("}",   Token::OpRbrace),
    ("[",   Token::OpLbracket),
    ("]",   Token::OpRbracket),
    (",",   Token::OpComma),
    (":",   Token::OpColon),
    ("&",   Token::OpAmpersand),
    ("=",   Token::OpEqual),
    (";",   Token::OpSemicolon),
    ("◦",   Token::OpBullet),
    ("×",   Token::OpCross),
    ("%",   Token::OpPercent),
    ("|",   Token::OpVbar),
    ("-",   Token::OpMinus),
    ("+",   Token::OpPlus),
    ("·",   Token::OpMdot),
    ("/",   Token::OpSlash),
    ("<|",  Token::OpDomrestr),
    ("..",  Token::OpInter),
    (":=",  Token::OpAssign),
    ("\\/", Token::OpSimpleunion),
    ("/\\", Token::OpSimpleinter),
    ("-->", Token::OpTotalfun),
    ("<--", Token::OpOutparam),
];
