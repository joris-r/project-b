
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum Token <'a> {
    Integer(&'a str),
    Float(&'a str),
    Identifier(&'a str),
    
    KwMachine,
    KwImplementation,
    KwConstraints,
    KwRefines,
    KwConcreteVariables,
    KwInvariant,
    KwInitialisation,
    KwOperations,
    KwBegin,
    KwEnd,
    KwPre,
    KwThen,
    KwVar,
    KwIn,
    KwWhile,
    KwDo,
    KwVariant,
    KwOr,
    KwMod,
    KwNot,
    
    OpLpar,       
    OpRpar,       
    OpLbrace,     
    OpRbrace,     
    OpLbracket,   
    OpRbracket,   
    OpComma,      
    OpColon,      
    OpAmpersand, 
    OpEqual,      
    OpSemicolon,  
    OpBullet,     
    OpCross,      
    OpPercent,    
    OpVbar,       
    OpMinus,      
    OpPlus,       
    OpMdot,       
    OpSlash,
    OpDot,
    OpDomrestr,   
    OpInter,      
    OpAssign,     
    OpDoubleBar,  
    OpImply,      
    OpLeq,        
    OpSimpleunion,
    OpSimpleinter,
    OpEquiv,      
    OpTotalfun,   
    OpOutparam,   
}


pub const KEYWORDS : [(&'static str,Token<'static>); 20] = [
    ("MACHINE",            Token::KwMachine),
    ("IMPLEMENTATION",     Token::KwImplementation),
    ("REFINES",            Token::KwRefines),
    ("CONSTRAINTS",        Token::KwConstraints),
    ("CONCRETE_VARIABLES", Token::KwConcreteVariables),
    ("INVARIANT",          Token::KwInvariant),
    ("INITIALISATION",     Token::KwInitialisation),
    ("OPERATIONS",         Token::KwOperations),
    ("BEGIN",              Token::KwBegin),
    ("END",                Token::KwEnd),
    ("PRE",                Token::KwPre),
    ("THEN",               Token::KwThen),
    ("VAR",                Token::KwVar),
    ("IN",                 Token::KwIn),
    ("WHILE",              Token::KwWhile),
    ("DO",                 Token::KwDo),
    ("VARIANT",            Token::KwVariant),
    ("or",                 Token::KwOr),
    ("mod",                Token::KwMod),
    ("not",                Token::KwNot),
];

pub const OPERATORS : [(&'static str,Token<'static>); 31] = [
    ("(",   Token::OpLpar),
    (")",   Token::OpRpar),
    ("{",   Token::OpLbrace),
    ("}",   Token::OpRbrace),
    ("[",   Token::OpLbracket),
    ("]",   Token::OpRbracket),
    (",",   Token::OpComma),
    (":",   Token::OpColon),
    ("&",   Token::OpAmpersand),
    ("=",   Token::OpEqual),
    (";",   Token::OpSemicolon),
    ("◦",   Token::OpBullet),
    ("×",   Token::OpCross),
    ("%",   Token::OpPercent),
    ("|",   Token::OpVbar),
    ("-",   Token::OpMinus),
    ("+",   Token::OpPlus),
    ("·",   Token::OpMdot),
    ("/",   Token::OpSlash),
    (".",   Token::OpDot),
    ("<|",  Token::OpDomrestr),
    ("..",  Token::OpInter),
    (":=",  Token::OpAssign),
    ("||",  Token::OpDoubleBar),
    ("=>",  Token::OpImply),
    ("<=",  Token::OpLeq),
    ("\\/", Token::OpSimpleunion),
    ("/\\", Token::OpSimpleinter),
    ("<=>", Token::OpEquiv),
    ("-->", Token::OpTotalfun),
    ("<--", Token::OpOutparam),
];
