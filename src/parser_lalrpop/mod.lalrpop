
grammar<'input>(text: &'input str)["LALR(1)"];

use syntax::Token;
use mbast::*;

extern {
    enum Token<'input> {
        "MACHINE"            => Token::KwMachine,
        "IMPLEMENTATION"     => Token::KwImplementation,
        "CONSTRAINTS"        => Token::KwConstraints,
        "REFINES"            => Token::KwRefines,
        "CONCRETE_VARIABLES" => Token::KwConcreteVariables,
        "INVARIANT"          => Token::KwInvariant,
        "INITIALISATION"     => Token::KwInitialisation,
        "OPERATIONS"         => Token::KwOperations,
        "BEGIN"              => Token::KwBegin,
        "END"                => Token::KwEnd,
        "PRE"                => Token::KwPre,
        "THEN"               => Token::KwThen,
        "VAR"                => Token::KwVar,
        "IN"                 => Token::KwIn,
        "WHILE"              => Token::KwWhile,
        "DO"                 => Token::KwDo,
        "VARIANT"            => Token::KwVariant,
        "or"                 => Token::KwOr,
        "mod"                => Token::KwMod,
        "not"                => Token::KwNot,

        "("   => Token::OpLpar,       
        ")"   => Token::OpRpar,       
        "{"   => Token::OpLbrace,     
        "}"   => Token::OpRbrace,     
        "["   => Token::OpLbracket,   
        "]"   => Token::OpRbracket,   
        ","   => Token::OpComma,      
        ":"   => Token::OpColon,      
        "&"   => Token::OpAmpersand , 
        "="   => Token::OpEqual,      
        ";"   => Token::OpSemicolon,  
        "◦"   => Token::OpBullet,     
        "×"   => Token::OpCross,      
        "%"   => Token::OpPercent,    
        "|"   => Token::OpVbar,       
        "-"   => Token::OpMinus,      
        "+"   => Token::OpPlus,       
        "·"   => Token::OpMdot,       
        "/"   => Token::OpSlash,
        "."   => Token::OpDot,
        "<|"  => Token::OpDomrestr,   
        ".."  => Token::OpInter,      
        ":="  => Token::OpAssign, 
        "||"  => Token::OpDoubleBar,
        "=>"  => Token::OpImply,
        "<="  => Token::OpLeq,
        "\\/" => Token::OpSimpleunion,
        "/\\" => Token::OpSimpleinter,
        "<=>" => Token::OpEquiv,
        "-->" => Token::OpTotalfun,   
        "<--" => Token::OpOutparam,   
        
        Integer    => Token::Integer(<&'input str>),
        Float      => Token::Float(<&'input str>),
        Identifier => Token::Identifier(<&'input str>),
    }
}


pub Component: () = Decl_component Header Statements "END" => ();

Decl_component: () = {
    "MACHINE" => (),
    "IMPLEMENTATION" => (),
};

Header: () = Identifier Paren_ident_list? => ();

Statements: () = Statement* => ();

Statement: () = {
    "REFINES" Ident_list => (),
    "CONCRETE_VARIABLES" Ident_list => (),
    <"CONSTRAINTS"> Expression => (),
    <"INVARIANT"> Expression => (),
    <"INITIALISATION"> Substitution => (),
    "OPERATIONS" Operation_list => (),
};

Operation_list = ListSep<Operation,";">;

Operation: () = (Ident_list "<--")? <Identifier> Paren_ident_list? "=" Substitution => ();

Substitution: ()  = {
    "BEGIN" <Substitution2> "END" => (),
    "PRE" Expression "THEN" <Substitution2> "END" => (),
    "VAR" Ident_list "IN" <Substitution2> "END" => (),
    "WHILE" Expression "DO" <Substitution2>
                       "INVARIANT" Expression
                       "VARIANT" Expression
                       "END" => (),
};

Substitution2: () = {
    <Substitution2> ";" <Substitution3> => (),
    <Substitution2> "||" <Substitution3> => (),
    <Substitution3> => (),
};

Substitution3: () = {
    <Expression> ":=" <Expression> => (),
    <Substitution> => (),
};

Expression: Expr = {
    Expression "<=>" <Expression2> => Expr::Id("Dummy".to_owned()),
    Expression "=>" <Expression2> => Expr::Id("Dummy".to_owned()),
    <Expression2> => Expr::Id("Dummy".to_owned()),
};

Expression2: Expr = {
    Expression2 "&" <Expression3> => Expr::Id("Dummy".to_owned()),
    Expression2 "or" <Expression3> => Expr::Id("Dummy".to_owned()),
    <Expression3> => Expr::Id("Dummy".to_owned()),
};

Expression3: Expr = {
    Expression3 ":" <Expression4> => Expr::Id("Dummy".to_owned()),
    Expression3 "<=" <Expression4> => Expr::Id("Dummy".to_owned()),
    Expression3 "=" <Expression4> => Expr::Id("Dummy".to_owned()),
    <Expression4> => Expr::Id("Dummy".to_owned()),
};

Expression4: Expr = {
    Expression4 "-->" <Expression5> => Expr::Id("Dummy".to_owned()),
    <Expression5> => Expr::Id("Dummy".to_owned()),
};

Expression5: Expr = {
    Expression5 "<|" <Expression6> => Expr::Id("Dummy".to_owned()),
    Expression5 "\\/" <Expression6> => Expr::Id("Dummy".to_owned()),
    Expression5 "/\\" <Expression6> => Expr::Id("Dummy".to_owned()),
    Expression5 "◦" <Expression6> => Expr::Id("Dummy".to_owned()),
    Expression5 "×" <Expression6> => Expr::Id("Dummy".to_owned()),
    <Expression6> => Expr::Id("Dummy".to_owned()),
};

Expression6: Expr = {
    Expression6 ".." <Expression7> => Expr::Id("Dummy".to_owned()),
    <Expression7> => Expr::Id("Dummy".to_owned()),
};

Expression7: Expr = {
    Expression7 "+" <Expression8> => Expr::Id("Dummy".to_owned()),
    Expression7 "-" <Expression8> => Expr::Id("Dummy".to_owned()),
    <Expression8> => Expr::Id("Dummy".to_owned()),
};

Expression8: Expr = {
    Expression8 "·" <Expression9> => Expr::Id("Dummy".to_owned()),
    Expression8 "/" <Expression9> => Expr::Id("Dummy".to_owned()),
    Expression8 "mod" <Expression9> => Expr::Id("Dummy".to_owned()),
    <Expression9> => Expr::Id("Dummy".to_owned()),
};

Expression9: Expr = {
    "-" <Expression9> => Expr::Id("Dummy".to_owned()),
    "not" <Expression9> => Expr::Id("Dummy".to_owned()),
    <Expression10> => Expr::Id("Dummy".to_owned()),
};

Expression10: Expr = {
    Expression10 <Expression11> => Expr::Id("Dummy".to_owned()),
    <Expression11> => Expr::Id("Dummy".to_owned()),
};

Expression11: Expr = {
    <Identifier> => Expr::Id(<>.to_owned()),
    <Number>,
    "%" <v:Ident_or_paren_ident_list> "." "(" <e:Expression> "|" <f:Expression> ")" => Expr::Quant(ExprQuantOpe::Lambda, v, Box::new(e), Box::new(f) ),
};

Ident_or_paren_ident_list = {
    Identifier => vec![<>.to_owned()],
    Paren_ident_list
};

Paren_ident_list = "(" <Ident_list> ")"  ;

Ident_list: Vec<String> = {
    <l:Ident_list> "," <i:Identifier> => {
        let mut l = l;
        l.push(i.to_owned());
        l
    },
    <Identifier> => vec![<>.to_owned()]
};

Number: Expr = {
    Integer => Expr::Num(<>.to_owned()),
    Float => Expr::Num(<>.to_owned()),
};


// Macro -----------------------------------

ListSep<T,S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};