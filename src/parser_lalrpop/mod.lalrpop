#[LALR]
grammar;

use mbast::*;

pub Component: Component =
    <k:Decl_component> <h:Header> <cb:Statements> "END" => {
        let (name, params) = h;
        cb.finalize(k, name, params)
    };

Decl_component: ComponentKind = {
    "MACHINE" =>
        ComponentKind::Machine,
        
    "REFINEMENT" =>
        ComponentKind::Refinement,
        
    "IMPLEMENTATION" =>
        ComponentKind::Implementation,
};

Header: (String, Vec<String>) =
    <n:Identifier> <l:Paren_ident_list?> => {
        let params = match l {
            Some(x) => x,
            None => vec![],
        };
        (n.to_owned(), params)
    };

Statements: ComponentBuilder = {
    <a:Statements> <k:"REFINES"> <b:Identifier> => {
        if a.refines == None {
            let mut a = a;
            a.refines = Some(b.to_owned());
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"IMPORTS"> <b:ListSep<Instance,",">> => {
        if a.imports.len() == 0 {
            let mut a = a;
            a.imports = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"INCLUDES"> <b:ListSep<Instance,",">> => {
        if a.includes.len() == 0 {
            let mut a = a;
            a.includes = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"EXTENDS"> <b:ListSep<Instance,",">> => {
        if a.extends.len() == 0 {
            let mut a = a;
            a.extends = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"SEES"> <b:Ident_list> => {
        if a.sees.is_empty() {
            let mut a = a;
            a.sees = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    <a:Statements> <k:"PROMOTES"> <b:Ident_list> => {
        if a.promotes.is_empty() {
            let mut a = a;
            a.promotes = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"USES"> <b:Ident_list> => {
        if a.uses.is_empty() {
            let mut a = a;
            a.uses = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"ABSTRACT_CONSTANTS"> <b:Ident_list> => {
        if a.abstract_constants.is_empty() {
            let mut a = a;
            a.abstract_constants = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"ABSTRACT_VARIABLES"> <b:Ident_list> => {
        if a.abstract_variables.is_empty() {
            let mut a = a;
            a.abstract_variables = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"CONCRETE_CONSTANTS"> <b:Ident_list> => {
        if a.concrete_constants.is_empty() {
            let mut a = a;
            a.concrete_constants = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"CONCRETE_VARIABLES"> <b:Ident_list> => {
        if a.concrete_variables.is_empty() {
            let mut a = a;
            a.concrete_variables = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"CONSTANTS"> <b:Ident_list> => {
        if a.constants.is_empty() {
            let mut a = a;
            a.constants = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"VARIABLES"> <b:Ident_list> => {
        if a.variables.is_empty() {
            let mut a = a;
            a.variables = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"CONSTRAINTS"> <b:Expression> => {
        match a.constraints {
            None => {
                let mut a = a;
                a.constraints = Some(b);
                a
            },
            _ => panic!(format!("multiple {:?}", k)),
        }
    },
    
    <a:Statements> <k:"PROPERTIES"> <b:Expression> => {
        match a.properties {
            None => {
                let mut a = a;
                a.properties = Some(b);
                a
            },
            _ => panic!(format!("multiple {:?}", k)),
        }
    },
    
    <a:Statements> <k:"INVARIANT"> <b:Expression> => {
        match a.invariant {
            None => {
                let mut a = a;
                a.invariant = Some(b);
                a
            },
            _ => panic!(format!("multiple {:?}", k)),
        }
    },
    
    <a:Statements> <k:"SETS"> <b:ListSep<Expression,";">> => {
        if a.sets.is_empty() {
            let mut a = a;
            a.sets = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"VALUES"> <b:ListSep<Expression,";">> => {
        if a.values.is_empty() {
            let mut a = a;
            a.values = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"ASSERTIONS"> <b:ListSep<Expression,";">> => {
        if a.assertions.is_empty() {
            let mut a = a;
            a.assertions = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"INITIALISATION"> <b:Substitution> => {
        match a.initialisation {
            None => {
                let mut a = a;
                a.initialisation = Some(b);
                a
            },
            _ => panic!(format!("multiple {:?}", k)),
        }
    },
    
    <a:Statements> <k:"OPERATIONS"> <b:Operation_list> => {
        if a.operations.is_empty() {
            let mut a = a;
            a.operations = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },
    
    <a:Statements> <k:"LOCAL_OPERATIONS"> <b:Operation_list> => {
        if a.local_operations.is_empty() {
            let mut a = a;
            a.local_operations = b;
            a
        } else {
            panic!(format!("multiple {:?}", k))
        }
    },

    () =>
        ComponentBuilder::new(),
};

Operation_list =
    ListSep<Operation,";">;

Operation: Box<Ope> =
    <po: ( <Ident_list> "<--" )? > <n:Identifier> <pi:Paren_ident_list?> "="
        <s:Substitution>
    =>
        Box::new( Ope{
            param_out: match po {
                            None => vec![],
                            Some(v) => v,
                        },
            name: n.to_owned(),
            param_in: match pi {
                            None => vec![],
                            Some(v) => v,
                       },
            sub: s, 
            });

Substitution: Box<Sub>  = {
    "BEGIN" <Substitution2> "END" =>
        Box::new(Sub::Begin(<>)),
    
    "PRE" <e:Expression> "THEN" <s:Substitution2> "END" =>
        Box::new(Sub::PreAssert(SubPreAssertOpe::Pre,
                       e,
                       s )),
    
    "VAR" <x:Ident_list> "IN" <s:Substitution2> "END" =>
        Box::new(Sub::Var(x, s)),
    
    "WHILE" <cond:Expression> "DO" <s:Substitution2>
                       "INVARIANT" <inv:Expression>
                       "VARIANT" <var:Expression>
                       "END" =>
        Box::new(Sub::While(cond,
                   s,
                   inv,
                   var )),
};

Substitution2: Box<Sub> = {
    <l:Substitution2> ";" <r:Substitution3> =>
        Box::new(Sub::Bin(l, SubBinOpe::Sequence, r)),
        
    <l:Substitution2> "||" <r:Substitution3> =>
        Box::new(Sub::Bin(l, SubBinOpe::Parallel, r)),
        
    <Substitution3>,
};

Substitution3: Box<Sub> = {
    <l:Expression> ":=" <r:Expression> =>
        Box::new(Sub::Simple(l, SubSimple::Assign, r)),
        
    <Substitution>,
};

Expression: Box<Expr> = {
    <l:Expression> "<=>" <r:Expression2> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Equiv, r)),
    
    <l:Expression> "=>" <r:Expression2> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Imply, r)),
    
    <Expression2>,
};

Expression2: Box<Expr> = {
    <l:Expression2> "&" <r:Expression3> =>
        Box::new(Expr::Bin(l, ExprBinOpe::And, r)),
    
    <l:Expression2> "or" <r:Expression3> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Or, r)),
    
    <Expression3>,
};

Expression3: Box<Expr> = {
    <l:Expression3> ":" <r:Expression4> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Colon, r)),
    
    <l:Expression3> "<=" <r:Expression4> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Leq, r)),
    
    <l:Expression3> "=" <r:Expression4> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Equal, r)),
    
    <Expression4>,
};

Expression4: Box<Expr> = {
    <l:Expression4> "-->" <r:Expression5> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Tfun, r)),
        
    <Expression5>,
};

Expression5: Box<Expr> = {
    <l:Expression5> "<|" <r:Expression6> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Domrestr, r)),
        
    <l:Expression5> "\\/" <r:Expression6> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Sunion, r)),
        
    <l:Expression5> "/\\" <r:Expression6> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Sinter, r)),
        
    <l:Expression5> "◦" <r:Expression6> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Semicolon, r)),
        
    <l:Expression5> "×" <r:Expression6> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Star, r)),
        
    <Expression6>,
};

Expression6: Box<Expr> = {
    <l:Expression6> ".." <r:Expression7> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Interval, r)),
        
    <Expression7>,
};

Expression7: Box<Expr> = {
    <l:Expression7> "+" <r:Expression8> => 
        Box::new(Expr::Bin(l, ExprBinOpe::Plus, r)),
        
    <l:Expression7> "-" <r:Expression8> => 
        Box::new(Expr::Bin(l, ExprBinOpe::Minus, r)),
        
    <Expression8>,
};

Expression8: Box<Expr> = {
    <l:Expression8> "·" <r:Expression9> => 
        Box::new(Expr::Bin(l, ExprBinOpe::Star, r)),
        
    <l:Expression8> "/" <r:Expression9> => 
        Box::new(Expr::Bin(l, ExprBinOpe::Slash, r)),
        
    <l:Expression8> "mod" <r:Expression9> => 
        Box::new(Expr::Bin(l, ExprBinOpe::Mod, r)),
        
    <Expression9>,
};

Expression9: Box<Expr> = {
    "-" <Expression9> =>
        Box::new(Expr::Unary(ExprUnaryOpe::Minus, <>)),
        
    "not" <Expression9> =>
        Box::new(Expr::Unary(ExprUnaryOpe::Negate, <>)),
        
    <Expression10>,
};

Expression10: Box<Expr> = {
    <l:Expression10> <r:Expression11> =>
        Box::new(Expr::Bin(l, ExprBinOpe::Apply, r)),
        
    <Expression11>,
};

Expression11: Box<Expr> = {
    <Identifier> => Box::new(Expr::Id(<>.to_owned())),
    
    <Number> => Box::new(<>),
    
    "%" <v:Ident_or_paren_ident_list> "." "(" <e:Expression> "|" <f:Expression> ")"
        => Box::new(Expr::Quant(ExprQuantOpe::Lambda, v, e, f )),
};

Ident_or_paren_ident_list = {
    Identifier => vec![<>.to_owned()],
    
    Paren_ident_list
};

Paren_ident_list = "(" <Ident_list> ")"  ;

Ident_list: Vec<String> = {
    <l:Ident_list> "," <i:Identifier> => {
        let mut l = l;
        l.push(i.to_owned());
        l
    },
    
    <Identifier> => vec![<>.to_owned()]
};

Instance: ( String, Option<Box<Expr>> ) = {
    <s:Identifier> <t:( "(" <Expression> ")" )?> => {
        match t {
            None => (s,None),
            Some(e) => (s,Some(e)),
        }
    }
};

Number: Expr = {
    <s:r"[0-9]+"> => Expr::Num(s.to_owned()),
};

RenIdent: (String, Option<String>) = {
    <Identifier> <( "." <Identifier> )?>
};

Identifier: String ={
    <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_owned(),
};


// Macro -----------------------------------

ListSep<T,S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};